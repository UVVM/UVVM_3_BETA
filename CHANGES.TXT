UVVM - Overview on Versions and Changes
==============================================================

This is the changes made in the UVVM release zip-file.
The purpose is to indicate which of the modules that have been
updated for this version of the zip file. For details about the
changes made for each individual module, please see the
CHANGES.TXT in each module's sub-directory.

----------------------------------------------------------------------


v3.0 BETA 202X.XX.XX
--------------------
- Fixed bug where queue status in VVC depends on undefined process execution order, issue #201.
- Fixed incorrect log messages in AXI-Stream BFM package.
- Removed ethernet_sb_pkg file, package already defined in vvc_methods_pkg.
- Fixed compilation warning vcom-1090. Updated vvc_generator.py script.
- Use the function get_scope_for_log() to generate all the VVCs scopes. Updated vvc_generator.py script.
- Replaced generic GC_CHANNEL for constant C_CHANNEL inside the VVC. Updated vvc_generator.py script.
- Removed constant C_DATA_WIDTH in uart_tx_vvc and use generic GC_DATA_WIDTH instead.
- Removed scope from t_vvc_labels.
- Normalized the data parameter in the uart_transmit and uart_expect BFM procedure.
- Fixed the wrong example for uart_expect in UART BFM Quick Reference.
- Fixed data length typo in Axistream BFM- and VVC Quick Reference.
- Added missing channel parameter in vvc_constructor for GMII and UART VVCs. Updated vvc_generator.py script.
- Added an alert when Spec Cov CSV file line length is greater than the maximum supported size.
- Removed alert_level parameter from uart_receive() VVC procedure as it is not used.
- Skip leading whitespace in all fields when reading the Spec Cov CSV file.
- Added functionality for extended error message, as default, to RGMII, GMII, Axi-Stream and Avalon stream.
- Updated spec_cov reporting in the run_spec_cov.py script.
- Added functionality in check_value and check_value_in_range to print closest fitting time units wrt. time type checks.
- Updated spec cov log messages and use new msg IDs for better verbosity.
- Updated vvc_generator.py to add missing scoreboard support in multiple executors.
- Added 7-bit data functionality to bitvis_uart
- Added 7-bit data functionality to bitvis_vip_uart based on pull request from Github user malsheimer
- Updated vvc_transaction_info in all VVCs to also trigger after the BFM call with updated data and the status
  COMPLETED. Updated vvc_generator.py script. NOTE that this change can cause older testbenches to fail due to the extra trigger,
  see the VVC Framework - Essential Mechanisms documentation for examples of the updated recommended usage.
- Added missing scope to alert in set_global_vvc_transaction_info procedure in all VVCs. Updated vvc_generator.py script.
- Removed unnecessary constraining in set_global_vvc_transaction_info procedure in all VVCs. Updated vvc_generator.py script.
- Moved t_transaction_status type from all VVCs to types_pkg and added COMPLETED. Updated vvc_generator.py script.
- Moved sb_pkg and pad_xxx_sb function in all VVCs from methods_pkg to new vvc_sb_pkg. Updated vvc_generator.py script.
- Fixed bug in await_cmd_from_sequencer() not using the correct VVC instance and channel.
- Added subtypes used as null vectors to reduce the number of compilation warnings in rand_pkg.
- Fixed a bug in func_cov_pkg when using Modelsim 2023.4 which caused transition bins to be sampled incorrectly.
- Added support for specifying directory when running run_spec_cov.py with --clean. Based on PR by am9417.
- Updated spec cov documentation for modified clean parameter to run_spec_cov.py.
- Added function to util check_value to properly display signed values
- Added general_severity to AXI BFM config record. Replaces error as default alert level in BFM and VVC. From pull request by user EMAZAC.
- Increased C_MAX_TUSER_BITS to 32 in AXI-Stream BFM. (allows for higher GC_USER_WIDTH)
- Updated vvc_generator.py generation of vvc_context file.
- Added a feature for detection of reading old partial coverage files in the run_spec_cov.py script.
- Minor fixes in vvc_generator.py including scoreboard being configured in all sub-channel VVCs.
- Added executor_is_busy to interpreter_terminate_current_command() missing in some VVCs.
- Reorganized structure of packages in uvvm_util, uvvm_vvc_framework and all VIPs in order to use correctly the declaration of
  generic packages to define protected types, as they should not be declared in the same package where they are used. Otherwise this
  could lead to a simulator error due to the shared variable being referenced before elaboration. Updated vvc_generator.py script.
- Moved update_vvc_activity_register() to td_vvc_entity_support_pkg and removed from all VIPs. Updated vvc_generator.py script.
- Renamed transaction_pkg to vvc_transaction_pkg in all VIPs.
- Updated Scoreboard documentation to mention in every method that instance 1 is used as default.
- Sort the coverage files in the func_cov_merge.py script to always get the same order of bins in the report.
- Fixed a GHDL bound check failure in unsigned rand() when having wrong min and max constraints.
- Removed protected type t_prot_alert_attention_counters and replaced with generic type.
- Renamed types named t_prot_<typename> to t_<typename>
- Fixed a GHDL exponentiation overflow error in rand_pkg.
- Added support for combination of AND- and OR-listed testcases in spec cov.
- Reset addr and wdata signals when sbi_write() finishes.
- Reset addr signal and wait a delta cycle when sbi_read() finishes.
- Wait until rising edge of the clock before exiting rgmii_read() so that the interface is idle when it happens.
- Changed max constants used in BFMs and VVCs to be adjustable from adaptations_pkg.
- Added individual constants to configure the VVCs max instance number from adaptations_pkg. Updated vvc_generator.py script.
- Removed Avalon-ST and Spec Cov local_adaptations_pkg and moved content to adaptations_pkg.
- Reorganized adaptations_pkg for better overview and moved internal UVVM constants and types to other packages.
- Updated Utility Library documentation on how to enable report_check_counters().
- Added comment support and updated handling of omitted requirements in spec cov.
- Various changes to spec cov output files.
- Added completion detection functionality to wait for all the VVCs to be inactive with no pending commands to be executed, and
  for all the enabled scoreboards to be empty: await_uvvm_completion(), await_sb_completion(), check_sb_completion().
- Added completion detection test to UVVM demo tb.
- Added new msg_id in adaptations_pkg: ID_AWAIT_UVVM_COMPLETION.
- Added PR from @aghoras fixing a problem with Avalon-MM BFM sampling readdata one cycle too early when waitrequest is not asserted.
- Fixed avalon_mm_read_response() sampling the same data in several pipelined commands.
- Reduced C_AXISTREAM_VVC_CMD_DATA_MAX_BYTES to avoid GHDL stack overflow.
- Use dedicated scope in Avalon-MM, AXI and AXI-Lite VVC pipeline processes.
- Fixed interpreter_fetch_result() not updating the response when the requested result is not available.
- Removed omitted requirement functionality in spec cov (replaced with comment support)
- Changed behavior for explicit fail at tickoff in spec cov.
- Fixed spec cov initialization check in tickoff procedure
- Added unwanted activity detection functionality to VVCs to give an alert if the DUT generates any unexpected bus activity.
- Added unwanted activity detection test to UVVM demo tb.
- Added unwanted activity detection in VVC generator.
- Added PR from @FPonGitHub removing vsim-8684 warning messages in AXI VVC.
- Removed vsim-8684 warning messages in AXI-Lite VVC.
- Fixed ready_default_value not having the initial value from the GC_AXISTREAM_BFM_CONFIG VVC generic.
- Added PR from @am9417 to support changing the default queue size configuration in the built-in scoreboards.
- Removed old await_completion code from all VVCs.
- Moved update_vvc_activity_register procedure to a common package for all VVCs.
- Update the VVC activity register in each executor individually using an ID to avoid problems with race conditions for Avalon-MM,
  AXI and AXI-Lite VVCs.
- Check correctly whether a cmd_idx has been executed in await_completion and fetch_result procedures for Avalon-MM, AXI and AXI-Lite VVCs.
- Added a delta cycle in Wishbone VVC executor so that the last_cmd_idx_executed is updated before being stored in the activity register.
- Updated vvc_generator.py with fixes for VVCs with multiple executors.
- Updated unwanted activity detection to ignore signal transitions from 'U', 'L' to/from '0', 'H' to/from '1'.
- Added a common procedure for unwanted activity detection in the VVC framework support package.
- Updated vvc_generator.py with fixes for ignored signal transitions in unwanted activity detection.
- Changed default names for log and alert files to UVVM_Log.txt and UVVM_Alert.txt
- SPI VIP: Fixed bug where slave BFM exited too late for multi-word transfers in some configurations.
- Updated vvc_generator.py with fixes for runtime errors in the VVCs.
- Spec cov: New output formats, added support for compound reqs in req list. 
- Fixed set_rand_seeds(string) procedure being dependent on previous seed values.
- Spec cov: Alert TB_FAILURE if number of input requirements exceeds configured limit.
- Updated vvc_generator.py to add missing delta cycle needed to update the last_cmd_idx_executed when not using transaction info.
- Spec cov: Fixed crash when opening an empty requirement file or non existing partial coverage directory.
- Methods_pkg: Modified alert text for mode_error in check_file_open_status
- Added methods to control randomization seeds in uvvm_util.
- Updated the random methods used in BFMs and VVCs to use the mechanism to control randomization seeds.
- Updated several .do files in order to allow compatibility between QuestaSim and Riviera Pro.
- Print an alert and reduce the resolution in the random(time) functions whenever the resolution parameter is bigger than the range.
- Use the lowest time unit among the range parameters instead of the simulator resolution limit for the random(time) functions.
- Added time_resolution parameter to rand(), rand_range_weight() and rand_range_weight_mode() time functions for single-method approach.
- Added time_resolution parameter to add_range_time() and added new procedure set_range_weight_time_resolution() for multi-method approach.
- Fixed logging and distribution of range values in randm() when using time values.
- Added random valid and ready configuration in Avalon-ST BFM and updated the Avalon-ST documentation.
- Moved the random configuration constants from axistream_bfm_pkg to bfm_common_pkg.
- Removed support for don't care operator in expected value in gpio_check_stable() BFM procedure and updated the GPIO documentation.
- Fixed issue with multiple subsequent calls to the clocked gen_pulse procedure.
- Removed unused type t_pulse_continuation.
- Added radix and prefix parameters to the integer, signed, and unsigned versions of check_value_in_range and await_change_to_value.
- Added get_basename(string) to the string_methods package to get the file name from a path string.
- Added scalable time units in check_stable().
- Changed C_SPI_VVC_DATA_ARRAY_WIDTH from 31 to 32 in adaptations_pkg.
- Removed the deallocate call from tee. The user should take care of memory management.


v3.0 BETA 2023.09.04
--------------------
- Added clear_list(t_void) method to protected type t_prot_vvc_list.
- Increased C_VVC_CMD_DATA_MAX_LENGTH from 32 to 1024 in bitvis_vip_gpio to enable bigger widths by default.
- Changed the main procedures of bitvis_vip_axistream using t_byte_array (deprecated) to be using t_slv_array instead.
  Old procedures are now overloads to ensure backwards compability
- Changed/improved the prompt and added a check and alert message for channel name input order of RX and TX in vvc_generator
- Improved vvc_generator.py script to automatically generate compilable
  code without requiring any user inputs.
- Fixed possible overflow when randomizing with multiple ranges.
- Fixed compilation warning on rand_pkg regarding a truncated value.
- Fixed random() time function and procedure overflowing when default time resolution was too small for a given range.
- Added an overload for the random() time function and procedure with a parameter to select the time resolution.
- Fixed optimization warning on methods_pkg regarding a string comparison.
- Corrected poll_until() parameter order for SBI BFM.
- Changed default timeout value to -1 ns in GPIO VVC gpio_expect() method.
- Changed GPIO BFM config match strictness default to MATCH_EXACT.
- Increased C_VVC_CMD_DATA_MAX_LENGTH from 32 to 64 in bitvis_vip_sbi to enable bigger widths by default.
- All queue setups now come directly from the VVC generics. Updated vvc_generator.py script.
- Removed delta cycle wait in VVC multiple executors. Updated vvc_generator.py script.
- Removed cmd/result queue parameters in the VVC Configuration. Updated vvc_generator.py script.
- Fixed crash in bitvis_vip_spec_cov run_spec_cov.py that could occur if there is an empty partial_coverage_files list.
- Fixed crash in bitvis_vip_spec_cov run_spec_cov.py that could occur with specification coverage file not found.
- Added target independent prefix "ti" to all VVC framework context declarations.
- Included ti_vvc_framework_context.vhd in uvvm_vvc_frameowrk compile_order.txt.
- Updated constant values related to cmd/results queues. Updated vvc_generator.py script.
- Updated Section 10.2 in Spec_Coverage QuickRef.
- Fixed direct use of protected variables in demo testbench for spec_cov.
- Fixed id_for_bfm for all BFMs.
- Added filter for (vcom-1246) warning in test.py and TCL compile scripts.
- Added bitvis_uart and bitvis_irqc to uvvm/script/component_list.txt.
- Renamed C_SCOPE to C_BFM_SCOPE in BFM package.
- Updated vvc_framework.rst documentation for further explanation of common types 
  and usage of t_vvc_result.
- Fixed incorrect librart use clause in td_entity_support_pkg.
- Updated scripts for proper handling of errors during compilation/simulation
  in older versions of Riviera-PRO, based on Github user bennyslbs contributions.
- Added PR from am9417 implementing terminate_current_command()/terminate_access support for
  slave side transactions of SPI.


v3.0 BETA 2023.01.16
--------------------
- Removed await_any_completion()


v3.0 BETA 2023.01.04
--------------------
- Rename t_vvc_info_list to t_prot_vvc_list to better indicate the type is protected.
- Added add_to_vvc_list() for adding VVC target to a protected t_vvc_list or use with await_completion()
- await_completion() no longer counts as VVC command, i.e. command index is no longer incremented.
- Removed cmd_idx from protected t_vvc_list.
- Added clear_list(t_void) method to protected type t_prot_vvc_list.


v3.0 BETA 2022.10.07
--------------------
- Updated PPT and manual
- Added functionality for passing HVVC msg_id_panels.


v3.0 BETA 2022.07.04
--------------------
 - Change from ordinary shared variables to protected shared variables throughout UVVM.
